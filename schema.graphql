enum Role {
  USER
  ADMIN
}

scalar Date

type User {
  id: ID!
  name: String
  email: String!
  role: Role!
  tasks: [Task]
}

type Task {
  id: ID!
  title: String!
  status: String!
  assignee: User!
  createdAt: Date!
}

type Query {
  # getUserById(id: ID!): User
  getAllTasks: [Task]
  getTaskById(id: ID!): Task
  getUsers(data: UserQueryInput!, orderBy: UserOrderBy): [User]
  getLoggedUser:User
}

type Mutation {
  createUser(data: CreateUserInput): User
  updateUser(id: ID!, where: UpdateUserInput!): User
  deleteUser(id: ID!): User
  createTask(title: String!, userId: ID!): Task
  updateTask(id: ID!, title: String!): Task
  deleteTask(id: ID!): Task
  login(email: String!, password: String!): String
}

input UserQueryInput{
  limit: Int = 10
  offset: Int = 0
  role: Role
  names_in: [String]
  ids_in: [String]
  status: TaskStatus
  userWithoutTasks: Boolean
}

enum TaskStatus{
  pending
  completed
}

enum UserOrderBy{
  name_asc
  name_desc
  role_asc
  role_desc
  id_asc
  id_desc
}

input CreateUserInput{
  name: String
  email: String!
  password: String!
  role: Role = USER
}

input UpdateUserInput{
  name: String
  password: String
  profilePic: String
}