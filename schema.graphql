enum Role {
  USER
  ADMIN
}

scalar Date

type User {
  id: ID!
  name: String
  email: String!
  role: Role!
  tasks: [Task]
}

type Task {
  id: ID!
  title: String!
  status: TaskStatus!
  assignee: User!
  createdAt: Date!
  uniqueTitle: String
  description: String
  createdBy: Role
}

type Query {
  getUsers(data: UserQueryInput!, orderBy: UserOrderBy, limit: Int = 10, offset: Int = 0): [User]
  getLoggedUser: User
  getTasks(data: TaskQueryInput!, orderBy: TaskOrderBy, limit: Int = 10, offset: Int = 0): [Task]
  getLoggedTask(data: TaskQueryInput, orderBy: TaskOrderBy, limit: Int = 10, offset: Int = 0): [Task]
}

type Mutation {
  createUser(data: CreateUserInput): User
  updateUser(id: ID!, where: UpdateUserInput!): User
  deleteUser(input: UserQueryInput): Count
  AddTask(input: CreateTaskInput): Count
  createTask(input: CreateTaskInput): Task
  updateTask(taskId: ID!, input: UpdateTaskInput): Task
  deleteTask(where: TaskQueryInput): Count
  login(email: String!, password: String!): String
}

input UserQueryInput {
  role: Role
  names_in: [String]
  ids_in: [ID]
  status: TaskStatus
  userWithoutTasks: Boolean
}

input TaskQueryInput {
  titles_in: [String]
  ids_in: [ID]
  status: TaskStatus
  assigneeIds_in: [ID]
}

enum TaskStatus {
  pending
  completed
}

enum UserOrderBy {
  name_asc
  name_desc
  role_asc
  role_desc
  id_asc
  id_desc
}

enum TaskOrderBy {
  title_asc
  title_desc
  id_asc
  id_desc
}

input CreateUserInput {
  name: String
  email: String!
  password: String!
  role: Role = USER
}

input UpdateUserInput {
  name: String
  password: String
  profilePic: String
  email: String
}

input CreateTaskInput {
  title: String
  description: String
  assigneeIds_in: [ID]
}

input UpdateTaskInput {
  title: String
  status: TaskStatus
  description: String
  assigneeId: ID
}

type Count {
  count: Int!
}